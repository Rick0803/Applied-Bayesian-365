# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(4, 6)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=9000,
n.burnin=1000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(4, 6)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=9000,
n.burnin=1000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
set.seed(1006562550)
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
set.seed(1006562550)
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
set.seed(1006562550)
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(8, 2)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rjags")
# install.packages("coda")
set.seed(1006562550)
library(coda)
library(R2jags)
library(lattice)
# Model construction with likelihood function and prior
model.JAGS = function(){
y ~ dbinom(psi, n)
theta ~ dbeta(3, 7)
tau ~ dbeta(6, 4)
lambda ~ dbeta(7, 3)
psi <- theta * lambda + (1 - theta) * (1 - tau)
}
# Simulating data
n = 100000
y = 30000
data.JAGS = list(y = y, n = n)
# Randomly select the initial values
inits.JAGS = function(){
return(list(theta=rbeta(1, 3, 7),tau=rbeta(1, 6, 4),lambda=rbeta(1, 7, 3)))
}
# Select parameters that will be simulated with MCMC model
para.JAGS = c("theta", "tau", "lambda", "psi")
# Fit the MCMC model, number of iterations = 90000, burn in = 10000
fit.JAGS = jags(data=data.JAGS,inits=inits.JAGS,
parameters.to.save = para.JAGS,
n.chains=1,
n.iter=90000,
n.burnin=10000,
model.file=model.JAGS)
# Print model fit summary
print(fit.JAGS)
# Generate traceplots
traceplot(fit.JAGS,mfrow=c(2,3),ask=FALSE)
# Plot MCMC object to show all parameter densities along with traceplots
fit.JAGS.mcmc = as.mcmc(fit.JAGS)
plot(fit.JAGS.mcmc,ask=FALSE)
# Summary as a MCMC object
summary(fit.JAGS.mcmc)
# Traceplots as a MCMC object
xyplot(fit.JAGS.mcmc,layout=c(2,3))
# Density plot as a MCMC object
densityplot(fit.JAGS.mcmc)
# Probability of Poisson distribution for at least 2 infections
P_atleast2 <- 1 - ppois(1, 7.175)
P_atleast2
# Probability of Poisson distribution for at least 28 infections
P_atleast28 <- 1 - ppois(27, 10.75)
P_atleast28
